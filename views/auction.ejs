<%- include('partials/header') -%>
      <div class="content paginated-form">
        <% if (has_ended){ %>
            <h2>This auction has ended</h2><br>
            <h2>A total of $<%=parseFloat(new String(Math.floor(current_amt)/100)).toFixed(2)%> was donated</h2>
            <h2>The highest bid was $<%=parseFloat(new String(Math.floor(highest_bid)/100)).toFixed(2);%></h2>
        <% }else{ %>

        <form action="/confirmation" method="post" id="payment-form">

        <div class="page-1">
          <div class="donate-form" id="payment-form">
            <h2><strong><%= location %>,</strong> <%= city %>, <%= state %></h2>
            <div class="title">
              <div class="icon" style="background-image: url('<%= image %>')"></div>
              <h1><%= charity %></h1>
            </div>
            <span class="currency-input">
              <input id="donate-amt"
                class="input-box"
                type="number"
                name="amount"
                min="1"
                step="1"
                placeholder="0">

                <a href="#pay" id="mini-donate" class="mini-donate button -primary">
                  <i class="fa fa-arrow-right"></i>
                </a>
            </span>

            <div class="info-section">
              <h2 class="title">About <%= charity %></h2>
              <p class="description"><%= description %> Auction ends in <strong id="time-left">--</strong>.</p>
            </div>
            <div class="info-section">
              <h2 class="title">How It Works</h2>
              <p class="description">Donate what you can. The highest donor keeps half of everything raised.</p>
            </div>

          </div>
        </div>

        <div class="page-2">
          <div class="payment-form">
            <h2><a href="#donate"><i class="fa fa-chevron-left"></i> Choose Amount</a></h2>
            <h1>Payment Info</h1>
            <fieldset class="user-info">
              <input name="name" type="text" class="input-box" required placeholder="Name on Card">
              
              <input name="email" type="email" class="input-box" required placeholder="Email">
            </fieldset>
            <div id="card-element">
              <!-- a Stripe Element will be inserted here. -->
            </div>
            <div id="card-errors" role="alert"></div>

            <button type="submit" class="button -hollow">Complete Donation <img class="icon" src="/images/chevron.svg" alt=""></button>
          </div>
        </div>

        </form>


      </div>
      <footer class="footer-bar paginated-form">
        <div class="page-1">
          <div class="quick-donate">
              <h2 class="title">Quick Donation</h2>
              <ul class="options">
                <li data-value="5" class="quick-item item">$5</li>
                <li data-value="10" class="quick-item item">$10</li>
                <li data-value="15" class="quick-item item">$15</li>
                <li data-value="20" class="quick-item item">$20</li>
                <li data-value="25" class="quick-item item">$25</li>
              </ul>
          </div>

          <div class="bottom-fields">
            <button id="donate-btn" class="button -primary" disabled>Donate</button>
          </div>
        </div>
        <% } %>

        <%- include('partials/footer-inner') -%>
      </footer>
      <script src="https://js.stripe.com/v3/"></script>
      <script src="/scripts/paginate.js"></script>
  <%- include('partials/end') -%>
    <script>
      if (!<%=has_ended%>){
        var countDownDate = new Date("<%= ending_time%>").getTime();
        console.log(countDownDate);
        var x = setInterval(function() {
          // Get todays date and time
          var now = new Date().getTime();

          // Find the distance between now an the count down date
          var distance = countDownDate - now;

          // Time calculations for days, hours, minutes and seconds
          var days = Math.floor(distance / (1000 * 60 * 60 * 24));
          var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
          var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
          var seconds = Math.floor((distance % (1000 * 60)) / 1000);

          // Display the result in the element with id="demo"
          document.getElementById("time-left").innerHTML = days + "d " + hours + "h "
          + minutes + "m " + seconds + "s ";
          if (minutes < 10 && hours == 0 && days == 0){
            document.getElementById("time-left").style.color = "red";
          }
          // If the count down is finished, write some text
          if (distance < 0) {
            clearInterval(x);
            document.getElementById("time-left").innerHTML = "AUCTION ENDED";
            // document.getElementById("payment-form").style.display = "none";
            //window.location = "/auction/<%= auction_id%>";
          }
        }, 1000);
      }
    </script>
    <script>
      // Create a Stripe client
      var stripe = Stripe('<%= stripe_key%>');

      // Create an instance of Elements
      var elements = stripe.elements();

      // Custom styling can be passed to options when creating an Element.
      // (Note that this demo uses a wider set of styles than the guide below.)
      var style = {
        base: {
          color: '#32325d',
          lineHeight: '18px',
          fontFamily: '"museo-sans-rounded","Helvetica Neue", Helvetica, sans-serif',
          fontSmoothing: 'antialiased',
          fontSize: '16px',
          '::placeholder': {
            color: '#aab7c4',
          }
        },
        invalid: {
          color: '#fa755a',
          iconColor: '#fa755a'
        }
      };

      // Create an instance of the card Element
      var card = elements.create('card', {style: style});
      // Add an instance of the card Element into the `card-element` <div>
      card.mount('#card-element');

      // Handle real-time validation errors from the card Element.
      card.addEventListener('change', function(event) {
        var displayError = document.getElementById('card-errors');
        if (event.error) {
          displayError.textContent = event.error.message;
        } else {
          displayError.textContent = '';
        }
      });

      // Handle form submission
      var form = document.getElementById('payment-form');
      form.addEventListener('submit', function(event) {
        event.preventDefault();

        stripe.createToken(card).then(function(result) {
          if (result.error) {
            // Inform the user if there was an error
            var errorElement = document.getElementById('card-errors');
            errorElement.textContent = result.error.message;
          } else {
            // Send the token to your server
            stripeTokenHandler(result.token);
          }
        });
      });

      function stripeTokenHandler(token) {

        // Insert the token ID into the form so it gets submitted to the server
        var form = document.getElementById('payment-form');
        var hiddenInput = document.createElement('input');
        hiddenInput.setAttribute('type', 'hidden');
        hiddenInput.setAttribute('name', 'stripeToken');
        hiddenInput.setAttribute('value', token.id);
        form.appendChild(hiddenInput);
        hiddenInput = document.createElement('input');
        hiddenInput.setAttribute('type', 'hidden');
        hiddenInput.setAttribute('name', 'auction_id');
        hiddenInput.setAttribute('value', '<%= auction_id%>');
        form.appendChild(hiddenInput);
        hiddenInput = document.createElement('input');
        hiddenInput.setAttribute('type', 'hidden');
        hiddenInput.setAttribute('name', 'card_id');
        hiddenInput.setAttribute('value', token.card['id']);
        form.appendChild(hiddenInput);
        form.submit();

      }
    </script>
    <script>
      $('#amount').inputmask("numeric", {
          radixPoint: ".",
          groupSeparator: ",",
          digits: 2,
          autoGroup: true,
          prefix: '$ ', //Space after $, this will not truncate the first character.
          rightAlign: false,
          oncleared: function () { self.Value(''); }
      });
    </script>
  </body>
</html>
